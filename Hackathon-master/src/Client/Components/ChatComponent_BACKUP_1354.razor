@using Microsoft.AspNetCore.SignalR.Client;
@using VitualReception.Domain.Model;

<PageTitle>Index</PageTitle>

<div class="container-fluid d-flex flex-column h-100">
    <div class="row mt-2">
        <h4>@Chat.Name</h4>
    </div>
    @foreach(var message in _messages)
    {
        
    <div class="row mt-2 @(message.CreatedByMember == Guid.Parse(MemberId) ? "justify-content-end" : "justify-content-start" )">
        <div class="w-auto px-4 py-2 @(message.CreatedByMember == Guid.Parse(MemberId) ? "bg-secondary" : "bg-info" )" style="color: white; border: 1px solid @(message.CreatedByMember == Guid.Parse(MemberId) ? "#f8f9fa" : "#0dcaf0" ); border-radius: 15px">
            <span>@message.CreatedDateTime.ToString()</span> <!-- Anzeige des Timestamps -->
            <br />
            @message.Content <!-- Anzeige des Nachrichteninhalts -->
        </div>
    </div>
    }
    <div class="row mt-auto">
        <div class="col-12">
            <div class="input-group mb-3">
                <input @bind-value="_messageContent" @bind-value:event="oninput" type="text" class="form-control" placeholder = "Nachricht" aria-describedby="chat-send-button" @onkeydown="HandleKeyPress">
                <button @onclick="Send" class="btn btn-outline-secondary @(!IsConnected ? "disabled" : null)" type="button" id="chat-send-button">Senden</button>
            </div>
        </div>
    </div>
</div>

@code {

    #region parameters

    [Parameter]
    public string MemberId { get; set; }

    [Parameter]
    public Chat Chat { get; set; }

    #endregion

    #region fields

    private HubConnection _hubConnection;
    private string _messageContent = string.Empty;
    private List<Message> _messages = new();
    

    #endregion

    private String AdminID = "e77d4178-5e50-419e-8c5f-7d148b7bf5e7";

    private Dictionary<string, string> FrequentlyAskedQuestions = new Dictionary<string, string>
        {
        { "What are your check-in and check-out times?", "Our check-in time is at 3:00 PM, and check-out time is at 11:00 AM." },
        { "Do you provide airport transportation?", "Yes, we provide complimentary airport transportation for our guests." },
        { "Is breakfast included in the room rate?", "Yes, breakfast is included in the room rate. We offer a continental breakfast buffet." }
    };


    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"http://localhost:5000/hubs/chat?chatId={Chat.Id}&memberId={MemberId}")
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            if(message != null)
                _messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        if (Chat.Messages != null)
        {
            foreach (var message in Chat.Messages.OrderBy(message => message.CreatedDateTime))
            { _messages.Add(message); }
        }

        await _hubConnection.StartAsync();
    }


    private async Task Send() {
<<<<<<< HEAD
        if (string.IsNullOrWhiteSpace(_messageContent))
            return;

        bool isFAQ = FrequentlyAskedQuestions.Any(faq =>
            _messageContent.Contains(faq.Key, StringComparison.OrdinalIgnoreCase));

        if (isFAQ) {
            await SendAutomatedResponse();
            return; 
        }
=======

        if(string.IsNullOrWhiteSpace(_messageContent))
            return;

        // Ersetzen Sie "\n" durch eine HTML-Zeilenumbruchdarstellung, wenn erforderlich.
        //var messageContent = _messageContent.Replace("\n", "<br/>");

        var message = Chat.CreateMessage(Guid.Parse(MemberId), _messageContent);
>>>>>>> 4f4c3b4c930a03cebdebc828f09a0e9173b95250

        var message = Chat.CreateMessage(Guid.Parse(MemberId), _messageContent);
        _messageContent = string.Empty;

        if (_hubConnection is not null) {
            await _hubConnection.SendAsync("WriteMessage", Chat.Id, message);
        }
    }

    private async Task SendAutomatedResponse()
    {
        string automatedResponse = GetAnswerForFAQ(_messageContent);

        if (string.IsNullOrWhiteSpace(automatedResponse))
        {
            automatedResponse = "Thank you for your inquiry. Here is the answer to your question.";
        }

        var questionMessage = Chat.CreateMessage(Guid.Parse(MemberId), _messageContent);
        var automatedMessage = Chat.CreateMessage(Guid.Parse(AdminID), automatedResponse);
        _messageContent = string.Empty;

        _messages.Add(questionMessage);
        _messages.Add(automatedMessage);

        bool send = true;
        /*
        if (_hubConnection is not null && send)
        {
            await _hubConnection.SendAsync("WriteMessage", Chat.Id, questionMessage);
            await _hubConnection.SendAsync("WriteMessage", Chat.Id, automatedMessage);

            send = false;

        }
        */
}


    private string GetAnswerForFAQ(string question) {
        foreach (var faq in FrequentlyAskedQuestions) {
            if (question.Contains(faq.Key, StringComparison.OrdinalIgnoreCase)) {
                return faq.Value;
            }
        }

        return null;
    }


    private async Task HandleKeyPress(KeyboardEventArgs e) {

        if(e.Key == "Enter") {

            if(e.ShiftKey) {
               _messageContent += Environment.NewLine;
            }
            else {
                
                await Send();
                
            }
        }
    }


    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    // Dispose HubConnection
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
